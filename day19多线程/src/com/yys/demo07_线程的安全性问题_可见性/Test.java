package com.yys.demo07_线程的安全性问题_可见性;

/**
 * @Author: 夜遊神
 * @Date: 2021/11/04/9:22
 */
public class Test {
    public static void main(String[] args) {
        /*
            多线程安全性问题--->可见性:
                概述:一个线程没有看到另一个线程对共享变量的修改
                比如:先启动一个线程,在线程中将一个变量的值修改,主线程就会一直无法获取到此变量的值
         */
        //创建线程对象
        MyThread mt = new MyThread();

        //启动线程
        mt.start();

        //主线程
        while (true){
            if (MyThread.flag == true){
                System.out.println("结束死循环...");
                break;
            }
        }
    }

    /*
        期望的结果:子线程修改了共享变量的flag的值为true后,就是希望在主线程里面的这个条件判断的死循环结束
        实际结果:子线程修改了共享变量之后,主线程的死循环没有结束

        为什么会造成这种结果?
            因为子线程修改了共享变量的flag值之后,主线程不可见

           由于死循环是很简单的,接近底层代码,所以只需要速度非常快,来不及去主内存中获取
           新的值,所以主线程工作内存中的flag值会一直为false,一直死循环,如果某一时刻,主线程去内存中重新获取修改后的flag值,
           就会结束死循环
           但是主线程他什么时候去主内存中获取修改后的flag值,我们不确定,所以可能存在多线程可见性问题
     */
}
